객체간의 관계(Relationship)
	객체 지향 프로그램에서 객체는 다른객체와 관계를 맺음
	관계의 종류
		1. 집합관계 : 완성품과 부품과의 관계(Composite pattern)
		2. 사용관계 : 객체가 다른 객체를 사용하는 관계 : 자동차 <=> 사람 ( 연관 관계 , Association )
		3. 상속관계 : 객체들간의 부모 자식간의 관계  ( 일반화 관계 , Generalization )


캡슐화 ( Encapsulation )
	1. 객체의 필드, 메소드를 하나로 묶고, 실제 구현 내용을 감추는 것 getter setter
	2. 외부 객체는 객체 내부 구조를 알지 못하며, 객체가 노출해 제공하는 필드와 메소드만 이용가능
	3. 필드와 메소드를 캡슐화하여 보호하는 이유는 외부의 잘못된 사용으로 인해 객체가 손상되지 않도록. 
		또 다른이유는? - 생각
	4. 자바 언어는 캡슐화 된 멤버를 노출시킬 것인지 숨길 것인지 결정하기 위해 접근 제한자를 사용


상속 ( Inheritance )
	1. 상위(부모) 객체의 필드와 메소드를 하위(자식) 객체에게 물려주는 행위
	2. 하위 객체는 상위 객체를 확장해서 추가적인 필드와 메소드를 가질 수 있음
	3. 상속대상 : 필드와 메소드
	4. 상속의 효과
	 	1) 상위 객체를 재사용해서 하위 객체를 빨리 개발이 가능함
	 	2) 반복된 코드의 중복을 줄임
	 	3) 유지보수의 편리성 제공, 객체의 다형성 구현
	 		3-1) 요구사항의 증가 => 프로그램에 적용하는데 상속을 받고 추가
	 			 상속을 받지 않으면 매번 클래스를 고쳐야 함 => 다른 클래스까지 바꿔야함
	 			 
다형성 ( Polymorphism )
	1. 자바에서 다형성이란 한 타입의 참조변수로 여러 타입의 객체를 참조할 수 있도록 한 것을 말함
		참조변수 int string 
	2. (코드측면에서 보면) 하나의 타입에 여러 객체를 대입함으로써 다양한 기능을 이용할 수 있도록 함
	3. 같은 타입이지만 실행 결과가 다양한 객체를 대입할 수 있는 성질
		(1) 부모 타입에는 모든 자식 객체가 대입 가능
		(2) 인터페이스(interface) 타입에는 모든 구현 객체가 대입 가능
	4. 효과
		(1) 객체를 부품화 시키는 것이 가능해짐
		(2) 유지보수가 용이함 ( 기능확장 및 변경이 용이 )


클래스란 ?
	1. 객체를 만들어 내기 위한 설계도 또는 틀
	2. 연관되어 있는 변수와 메소드의 집합
	
객체란 ? 
	1. 클래스에 선언된 모양 그대로 생성된 실체
	2. oop 관점에서 클래스의 타입으로 선언되었을 때 객체 라고 부른다
	
인스턴스란 ?
	1. 인스턴스는 객체에 포함된다고 볼 수 있으며
	2. oop 관점에서 객체가 메모리에 할당되어 실제 사용될  인스턴스 라고 부른다.
	
	*하나의 클래스로부터 여러개의 서로다른 인스턴스를 만듬 ( new() 할 때마다 서로다른 인스턴스가 만들어짐)
	*하나의 클래스로부터 한개의 인스턴스만 만들 수도 있음 => singleton 이라 함 왜 필요할까요?


클래스 이름
	자바 식별자(Identifier) 작성규칙에 따라야 함
		1 하나 이상의 문자로 이루어져야 한다. Car SportsCar
		2 첫 번째 글자는 숫자가 올 수 없다. Car 3Car(x)
		3 $ _ 외의 특수 문자는 사용할 수 없다. $Car, _Car, @Car(x), #Car(x)
		4 자바 키워드는 사용할 수 없다.	int(x) for(x)
		
		
		한글이름도 가능하나 영어이름으로 작성
		알파벳 대소문자는 서로 다른 문자로 인식
		첫 글자와 열결된 다른 단어의 첫 글자는 대문자로 작성하는것이 관ㄹ례임 (camelcase)
		
클래스 선언과 컴파일
	소스 파일 생성 : 클래스 이름.java (대소문자 주의)
	소스 작성
	
	public class 클래스 이름 {     => 컴파일  			클래스이름.class
	}							=> javac.exe

 	소스 파일당 하나의 클래스를 선언하는 것이 관례
		1. 두개 이상의 클래스도 선언 가능
		2. 소스 파일 이름과 동일한 클래스만 public으로 선언가능
		3. 선언한 개수만큼 바이트 코드 파일이 생성됨
	 
	 Car.java
	 public class Car {								Car.class
	 							=> 컴파일
	 } 							=> javac.exe
	 class Tire {									Tire.class
	 
	 }
	 
	 
new 연산자
	객체 생성 역할
		1. 클래스()는 생성자를 호출하는 코드
		2. 생성된 객체는 힙 메모리 영역에 생성
		
	New 연산자는 객체를 생성한 후에, 객체 생성 주소(번지)를 리턴 함 

클래스 변수
	1. New 연산자에 의해 리턴 된 객체의 번지 저장(참조 타입 변수)
	2. 힙 영역의 객체를 사용하기 위해 클래스 변수를 사용함
	3. 메모리 영역(Static, Stack & Heap area) - Chap05, page6
	
	
	
패키지 기법
Com.
java	
